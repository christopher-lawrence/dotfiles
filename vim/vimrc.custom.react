" VIMRC Overrides: {{{

" required by coc
" set encoding=utf-8              " not needed for neovim
set hidden
set nobackup
set nowritebackup
set cmdheight=1
set updatetime=300
set shortmess+=c
set signcolumn=yes

set shiftwidth=2
set tabstop=2

" performance tweaks
set nocursorline
set nocursorcolumn
set scrolljump=5
set lazyredraw
set redrawtime=10000
set synmaxcol=180
set re=0

" set filetypes as typescriptreact
" autocmd BufEnter *.tsx set filetype=typescriptreact
" autocmd BufEnter *.jsx set filetype=javascriptreact

" }}}

" COC: {{{
" Reference: https://thoughtbot.com/blog/modern-typescript-and-react-development-in-vim
" list of the extensions to make sure are always installed
let g:coc_global_extensions = [
            \'coc-yank',
            \'coc-pairs',
            \'coc-json',
            \'coc-css',
            \'coc-html',
            \'coc-tsserver',
            \'coc-yaml',
            \'coc-prettier',
            \'coc-xml',
            \'coc-marketplace',
            \'coc-sh',
            \'coc-jest'
            \]

" Use tab for trigger completion with characters ahead and navigate.
function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~ '\s'
endfunction

" Insert <tab> when previous text is space, refresh completion if not.
inoremap <silent><expr> <TAB>
  \ coc#pum#visible() ? coc#pum#next(1) :
  \ <SID>check_back_space() ? "\<Tab>" :
  \ coc#refresh()
inoremap <expr><S-TAB> coc#pum#visible() ? coc#pum#prev(1) : "\<C-h>"

" Use <CR> to confirm completion, use:
inoremap <expr> <cr> coc#pum#visible() ? coc#_select_confirm() : "\<CR>"

" To make <CR> to confirm selection of selected complete item or notify coc.nvim to format on enter, use: >
inoremap <silent><expr> <CR> coc#pum#visible() ? coc#_select_confirm()
      \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" jump stuff
nmap <leader>jd <Plug>(coc-definition)
nmap <leader>jy <Plug>(coc-type-definition)
nmap <leader>ji <Plug>(coc-implementation)
nmap <leader>jr <Plug>(coc-references)

" Formatting selected code.
xmap <leader>cf  <Plug>(coc-format-selected)
nmap <leader>cf  <Plug>(coc-format-selected)

" Applying codeAction to the selected region.
" Example: `<leader>aap` for current paragraph
xmap <leader>cc <Plug>(coc-codeaction-line)
nmap <leader>cc <Plug>(coc-codeaction-selected)

" Remap keys for applying codeAction to the current buffer.
nmap <leader>ca  <Plug>(coc-codeaction)

" Apply AutoFix to problem on the current line.
nmap <leader>cf  <Plug>(coc-fix-current)

" Run the Code Lens action on the current line.
nmap <leader>cl  <Plug>(coc-codelens-action)

" Symbol renaming.
nmap <leader>rn <Plug>(coc-rename)

" Trigger tooltip hover
nnoremap <leader>K :call CocAction('doHover')<CR>

" Diagnostics list
nnoremap <leader>cd :<C-u>CocList diagnostics<cr>
" Use `[g` and `]g` to navigate diagnostics
nmap <silent><leader>[g <Plug>(coc-diagnostic-prev)
nmap <silent><leader>]g <Plug>(coc-diagnostic-next)

nmap <leader>gp <Plug>(coc-git-chunkinfo)
nmap <leader>gj <Plug>(coc-git-nextchunk)
nmap <leader>gk <Plug>(coc-git-prevchunk)

" }}}
"

" Startify: {{{
let g:startify_padding_left = 10
let g:startify_session_persistence = 1
let g:startify_enable_special = 0
let g:startify_change_to_vcs_root = 1
let g:startify_lists = [
    \ { 'type': 'dir'       },
    \ { 'type': 'files'     },
    \ { 'type': 'sessions'  },
    \ { 'type': 'bookmarks' },
    \ { 'type': 'commands' },
    \ ]

" bookmark examples
let  g:startify_bookmarks =  [
    \ {'c': '~/.config'},
    \ {'s': '~/src'},
    \ {'w': '~/src/sp-desktop'},
    \ ]

" custom commands
let g:startify_commands = [
    \ {'ch':  ['Health Check', ':checkhealth']},
    \ {'ps': ['Plugins status', ':PlugStatus']},
    \ {'pu': ['Update vim plugins',':PlugUpdate | PlugUpgrade']},
    \ {'uc': ['Update coc Plugins', ':CocUpdate']},
    \ {'h':  ['Help', ':help']},
    \ ]
" }}}

" startify file icons
function! StartifyEntryFormat()
    return 'WebDevIconsGetFileTypeSymbol(absolute_path) ." ". entry_path'
endfunction

"" FZF
nnoremap <silent> <leader>f :Files<CR>
nmap <leader>b :Buffers<CR>
nmap <leader>c :Commands<CR>
nmap <leader>t :BTags<CR>
nmap <leader>h :History<CR>
nmap <leader>/ :Rg<CR>
nmap <leader>gc :Commits<CR>
nmap <leader>gs :GFiles?<CR>
nmap <leader>sh :History/<CR>

" show mapping on all modes with F1
nmap <F1> <plug>(fzf-maps-n)
imap <F1> <plug>(fzf-maps-i)
vmap <F1> <plug>(fzf-maps-x)

let g:fzf_layout = {'up':'~90%', 'window': { 'width': 0.8, 'height': 0.8,'yoffset':0.5,'xoffset': 0.5, 'border': 'sharp' } }
let g:fzf_tags_command = 'ctags -R'

" set preview theme
let $BAT_THEME = "Nord"

let $FZF_DEFAULT_OPTS = "--layout=reverse --inline-info"
let $FZF_DEFAULT_COMMAND = "rg --files --hidden --glob '!.git/**' --glob '!.dart_tool/**' --glob '!.idea' --glob '!node_modules'"

" indentLine
let g:indentLine_char_list = ['▏', '¦', '┆', '┊']
let g:indentLine_setColors = 1
let g:indentLine_setConceal = 1                         " actually fix the annoying markdown links conversion
let g:indentLine_fileTypeExclude = ['startify']

au BufEnter * set fo-=c fo-=r fo-=o                     " stop annoying auto commenting on new lines

" Vimspector: {{{
let g:vimspector_enable_mappings = 'VISUAL_STUDIO'
nnoremap <leader>dl :call vimspector#Launch()<CR>
" }}}

" Lightline: {{{
let g:lightline = {
\ 'colorscheme': 'nord',
\ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
\ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
\ 'active': {
\   'left': [
\     ['mode', 'paste'],
\     ['gitbranch', 'filename', 'modified'],
\     ['readonly', 'tagbar']
\   ],
\   'right': [
\     ['lineinfo'], ['percent'], ['cocstatus'],
\     ['fileformat', 'fileencoding', 'filetype' ]
\   ],
\ },
\ 'inactive': {
\   'right': [['lineinfo'], ['percent'], ['sharpenup']],
\   'left': [
\     ['mode', 'paste'],
\     ['readonly', 'filename', 'tagbar', 'modified']
\   ],
\ },
\ 'component_function': {
\   'gitbranch': 'FugitiveHead',
\   'cocstatus': 'coc#status',
\   'currentFunction': 'CocCurrentFunction'
\ },
\}

