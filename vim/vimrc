" Windows: change this file to _vimrc

" Package Manager
set nocompatible              " be iMproved, required
filetype off                  " required

" Plugins: {{{
" The default plugin directory will be as follows:
"   - Vim (Linux/macOS): '~/.vim/plugged'
"   - Vim (Windows): '~/vimfiles/plugged'
"   - Neovim (Linux/macOS/Windows): stdpath('data') . '/plugged'
" You can specify a custom plugin directory by passing it as the argument
"   - e.g. `call plug#begin('~/.vim/plugged')`
"   - Avoid using standard Vim directory names like 'plugin'
call plug#begin()

" Fugitive - Git pluging
Plug 'tpope/vim-fugitive'

" Enables GBrowse in Fugitive
Plug 'tpope/vim-rhubarb'

" NERDTree - Folder browser
Plug 'scrooloose/nerdtree'

" NERDTree git plugin
Plug 'Xuyuanp/nerdtree-git-plugin'

" CtrlP - Fuzzy search for files, buffers, MRU, etc
Plug 'ctrlpvim/ctrlp.vim'

" Linting/error highlighting
Plug 'dense-analysis/ale'

" Vim  integration, used as OmniSharp selector
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Colorscheme
" Plug 'gruvbox-community/gruvbox'
" Plug 'joshdick/onedark.vim'
" Plug 'nanotech/jellybeans.vim' 
Plug 'arcticicestudio/nord-vim'

" Statusline
Plug 'itchyny/lightline.vim'
" Plug 'shinchu/lightline-gruvbox.vim'
Plug 'maximbaz/lightline-ale'

" GitGutter
Plug 'airblade/vim-gitgutter'

" Spelling for Pascal/camel/etc cases
Plug 'kamykn/spelunker.vim'

" Editor Config
" https://github.com/editorconfig/editorconfig-vim
Plug 'editorconfig/editorconfig-vim'

" Load other plugin files
if filereadable(".vimrc.plugins")
    so .vimrc.plugins
endif

" Initialize plugin system
call plug#end()

" }}}

" Settings: {{{

filetype indent plugin on

syntax enable

set encoding=utf-8

scriptencoding utf-8

let mapleader = "\<SPACE>"

set completeopt=menuone,noinsert,noselect,popuphidden
" set completepopup=highlight:Pmenu,border:off
set completepopup=highlight:Pmenu

set backspace=indent,eol,start
set expandtab
set shiftround
set shiftwidth=4
set softtabstop=-1
set tabstop=4
" set textwidth=80
set title
set smarttab

set hidden
" set nofixendofline
set nostartofline
set splitbelow
set splitright

" Highlight search
set hlsearch

" Auto move to search
set incsearch

" Line numbers -- hybrid
set number relativenumber

" Position in file -- bottom right
set ruler

" set noruler
" set noshowmode
set signcolumn=yes

" Enable mouse for all modes
set mouse=a
" set updatetime=1000

" This seems to fix issues with Ctrl-P
set maxmempattern=5000

" Default is 4000ms. This should allow GitGutter to update more frequently
set updatetime=250

" lightline fix
set laststatus=2

" Spell file to git repository
set spellfile=~/.config/vim/spell/en.utf-8.add

" This is supposed to allow for system clipboard
" set clipboard=unnamedplus
" }}}

" Lightline: {{{
"\ 'colorscheme': 'jellybeans',
"\ 'colorscheme': 'gruvbox',
let g:lightline = {
\ 'colorscheme': 'nord',
\ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
\ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
\ 'active': {
\   'left': [
\     ['mode', 'paste'],
\     ['gitbranch', 'filename', 'modified'],
\     ['readonly', 'tagbar']
\   ],
\   'right': [
\     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok'],
\     ['lineinfo'], ['percent'],
\     ['fileformat', 'fileencoding', 'filetype' ]
\   ],
\ },
\ 'inactive': {
\   'right': [['lineinfo'], ['percent'], ['sharpenup']],
\   'left': [
\     ['mode', 'paste'],
\     ['readonly', 'filename', 'tagbar', 'modified']
\   ],
\ },
\ 'component_function': {
\   'gitbranch': 'FugitiveHead',
\ },
\ 'component_expand': {
\   'linter_checking': 'lightline#ale#checking',
\   'linter_infos': 'lightline#ale#infos',
\   'linter_warnings': 'lightline#ale#warnings',
\   'linter_errors': 'lightline#ale#errors',
\   'linter_ok': 'lightline#ale#ok'
\  },
\ 'component_type': {
\   'linter_checking': 'right',
\   'linter_infos': 'right',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error',
\   'linter_ok': 'right'
\  }
\}

" CtrlP: {{{
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window = 'results:100' " overcome limit imposed by max height

" Allow <cr> to open in a tab -- revert to default
" let g:ctrlp_prompt_mappings = {
" \ 'AcceptSelection("e")': ['<c-t>'],
" \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
" \ }
" }}}

" Colors: {{{
" TODO: WTF does this do??
" augroup ColorschemePreferences
"   autocmd!
"   " These preferences clear some gruvbox background colours, allowing transparency
"   autocmd ColorScheme * highlight Normal     ctermbg=NONE guibg=NONE
"   autocmd ColorScheme * highlight SignColumn ctermbg=NONE guibg=NONE
"   autocmd ColorScheme * highlight Todo       ctermbg=NONE guibg=NONE
"  " Link ALE sign highlights to similar equivalents without background colours
"   autocmd ColorScheme * highlight link ALEErrorSign   WarningMsg
"   autocmd ColorScheme * highlight link ALEWarningSign ModeMsg
"   autocmd ColorScheme * highlight link ALEInfoSign    Identifier
" augroup END

set background=dark
" colorscheme gruvbox
colorscheme nord
" }}}

" ALE: {{{
let g:ale_sign_error = '!'
let g:ale_sign_warning = '•'
let g:ale_sign_info = '·'
" let g:ale_sign_style_error = '·'
" let g:ale_sign_style_warning = '·'

let g:ale_linters = { 'cs': ['OmniSharp'] }

nmap <silent> <leader>aj :ALENextWrap<cr>
nmap <silent> <leader>ak :ALEPreviousWrap<cr>
" }}}

" Autoformat: {{{
" let g:formatterpath = ['/usr/local/Cellar/astyle/3.1/bin']
" let g:formatdef_cs_format = '"astyle --mode=cs --style=kr --indent-namespaces -pcH".(&expandtab ? "s".shiftwidth() : "t")'
" let g:formatters_cs = ['cs_format']
" }}}

" Use unicode chars for ale indicators in the statusline
let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
" }}}

" FZF: {{{
" Ag shortcut
nnoremap <leader>ffs :Ag<CR>

" [Buffers] Jump to the existing window if possible
let g:fzf_buffers_jump = 1

" This is the default extra key bindings
 let g:fzf_action = {
    \ 'ctrl-t': 'tab split',
    \ 'ctrl-x': 'split',
    \ 'ctrl-v': 'vsplit' }
" }}}

" NERDTree: {{{
nnoremap <silent> <leader>ntt :NERDTreeToggle<CR>
nnoremap <silent> <leader>ntn :NERDTreeFocus<CR>
nnoremap <silent> <leader>ntf :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
let g:NERDTreeWinSize=60
" Start NERDTree and put the cursor back in the other window.
" autocmd VimEnter * NERDTree | wincmd p
" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
" }}}

" (fugitive) Git: {{{
nnoremap <silent> <leader>g :G<CR>
nnoremap <silent> <leader>gw :Gwrite<CR>
nnoremap <silent> <leader>gd :Gdiffsplit<CR>
" Select buffer 3 -- on the right -- during merge conflic / diff view
nmap <leader>gj :diffget //3<CR>
" Select buffer 2 -- on the left -- during merge conflic / diff view
nmap <leader>gf :diffget //2<CR>
" }}}

" GitGutter: {{{
let g:gitgutter_log=0
" }}}

" Spelunker: {{{
autocmd ColorScheme *
\ highlight SpelunkerSpellBad cterm=underline ctermfg=247 gui=underline guifg=#9e9e9e |
\ highlight SpelunkerComplexOrCompoundWord cterm=underline ctermfg=NONE gui=underline guifg=NONE
" }}}

" END HERE }}}
"

" Misc: {{{
"set autochdir " -- This setting affects NERDTree-git-plugin
" set macligatures
" Clear hlsearch
:command C let @/=""

" Change cursor based on mode -- tmux running on macos *only*!
let &t_SI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=1\x7\<Esc>\\" " insert
let &t_SR = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=2\x7\<Esc>\\" " replace
let &t_EI = "\<Esc>Ptmux;\<Esc>\<Esc>]50;CursorShape=0\x7\<Esc>\\" " normal

" These speed up the transition of the cursor
set ttimeout
set ttimeoutlen=1
set listchars=tab:>-,trail:~,extends:>,precedes:<,space:.
set ttyfast
" }}}

" Build: {{{
" Add scripts to runtime path
" TODO - fix this?
" set rtp^=~/.scripts
" TODO - can this run in a separate tmux pane?
" nnoremap <F6> :!~/.scripts/api-build.sh<CR>
" }}}

" Buffers: {{{
map <A-TAB> :bnext<CR>
map <A-S-TAB> :bp<CR>
" This will close the current buffer without closing the 'vsplit'
nmap <silent> <leader><F2> :bnext\|:bd #<CR>
" I'd prefer it to close the buffer and window associated with it
map <F2> :bd<CR>
" }}}

" Tabs: {{{
" Consoles do not support the use of TAB
" map <C-S-TAB> :tabprev<CR>
" map <C-TAB> :tabnext<CR>
noremap <silent> <C-k> :tabnext<CR>
noremap <silent> <C-j> :tabprev<CR>
noremap <silent> <F4> :tabclose<CR>
noremap <silent> <C-t> :tabnew<CR>
noremap <silent> th :tabfirst<CR>
noremap <silent> tj :tabnext<CR>
noremap <silent> tk :tabprev<CR>
noremap <silent> tl :tablast<CR>
noremap <silent> tt :tabedit<Space>
noremap <silent> tn :tabnew<Space>
noremap <silent> tm :tabm<Space> 
noremap <silent> td :tabclose<CR>

noremap <leader><Left> :-tabmove<cr>
noremap <leader><Right> :+tabmove<cr>
" Go to last active tab 
au TabLeave * let g:lasttab = tabpagenr()
nnoremap <silent> <c-l> :exe "tabn ".g:lasttab<cr>
vnoremap <silent> <c-l> :exe "tabn ".g:lasttab<cr>
" }}}

" Theme: {{{
" set guifont=Lucida\ Console:h11
set guifont=FiraCodeNerdFontComplete-Regular:h14
" colorscheme jellybeans
" colorscheme industry
" }}}

" Default to Documents folder
" Use tmuxinator and set values there
" cd ~/src/Levitate-API

" set nowrap

" TODO Custom highlighting
" fun! SetMyTodos()
    " syn match myTodos /\%(FOLLOWUP:\)\|\%(NOTE:\)/
"     syn match myTodos /\%(FOLLOWUP:\)/
"     hi link myTodos Todo
" endfu
" autocmd bufenter * :call SetMyTodos()

" Load custom vim settings
if filereadable(".vimrc.custom")
    so .vimrc.custom
endif

