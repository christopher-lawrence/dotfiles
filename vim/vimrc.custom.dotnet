
" Asyncomplete: {{{
let g:asyncomplete_auto_popup = 1
let g:asyncomplete_auto_completeopt = 0
" }}}

" Sharpenup: {{{
" All sharpenup mappings will begin with `<Space>os`, e.g. `<Space>osgd` for
" :OmniSharpGotoDefinition
let g:sharpenup_map_prefix = '<leader>os'

let g:sharpenup_statusline_opts = { 'Text': '%s (%p/%P)' }
let g:sharpenup_statusline_opts.Highlight = 0

augroup OmniSharpIntegrations
autocmd!
autocmd User OmniSharpProjectUpdated,OmniSharpReady call lightline#update()
augroup END
" }}}

" Vimspector: {{{
" let g:vimspector_enable_mappings = 'HUMAN'
" map <F5> :call vimspector#Continue()<CR>
" map <F9> :call vimspector#ToggleBreakpoint()<CR>
" }}}

" Lightline: {{{
"\ 'colorscheme': 'jellybeans',
"\ 'colorscheme': 'gruvbox',
let g:lightline = {
\ 'colorscheme': 'nord',
\ 'separator': { 'left': "\ue0b0", 'right': "\ue0b2" },
\ 'subseparator': { 'left': "\ue0b1", 'right': "\ue0b3" },
\ 'active': {
\   'left': [
\     ['mode', 'paste'],
\     ['gitbranch', 'filename', 'modified'],
\     ['readonly', 'tagbar']
\   ],
\   'right': [
\     ['linter_checking', 'linter_errors', 'linter_warnings', 'linter_infos', 'linter_ok'],
\     ['lineinfo'], ['percent'],
\     ['fileformat', 'fileencoding', 'filetype', 'sharpenup' ]
\   ],
\ },
\ 'inactive': {
\   'right': [['lineinfo'], ['percent'], ['sharpenup']],
\   'left': [
\     ['mode', 'paste'],
\     ['readonly', 'filename', 'tagbar', 'modified']
\   ],
\ },
\ 'component': {
\   'sharpenup': sharpenup#statusline#Build(),
\ },
\ 'component_function': {
\   'gitbranch': 'FugitiveHead',
\ },
\ 'component_expand': {
\   'linter_checking': 'lightline#ale#checking',
\   'linter_infos': 'lightline#ale#infos',
\   'linter_warnings': 'lightline#ale#warnings',
\   'linter_errors': 'lightline#ale#errors',
\   'linter_ok': 'lightline#ale#ok'
\  },
\ 'component_type': {
\   'linter_checking': 'right',
\   'linter_infos': 'right',
\   'linter_warnings': 'warning',
\   'linter_errors': 'error',
\   'linter_ok': 'right'
\  }
\}

" OmniSharp: {{{
" How do display popups -- ex Preview Definition
let g:OmniSharp_popup_position = 'peek'
let g:OmniSharp_want_snippet = 0
" let g:OmniSharp_highlight_types = 0
" \ 'highlight': 'Normal',
" Note exactly sure _where_ this is used.  Seems to be for autocomplete tasks
" let g:OmniSharp_popup_options = {
"     \ 'highlight': 'Pmenu',
"     \ 'padding': [0, 0, 0, 0],
"     \ 'border': [1]
" \}

" let g:OmniSharp_highlight_groups = {
" \ 'ExcludedCode': 'NonText'
" \}
" Use FZF for symbol lookup
let g:OmniSharp_selector_ui = 'fzf'
let g:OmniSharp_selector_findusages = 'fzf'

" From version 1.38.0 of OmniSharp-roslyn, a dotnet native net6.0 server
" version is available.
let g:OmniSharp_server_use_net6 = 1
" }}}

" AsyncAutocomplete: {{{
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
" }}}

" CtrlP: {{{
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_match_window = 'results:100' " overcome limit imposed by max height
let g:ctrlp_mruf_relative = 1 " set mru to current working directory

" Allow <cr> to open in a tab -- revert to default
" let g:ctrlp_prompt_mappings = {
" \ 'AcceptSelection("e")': ['<c-t>'],
" \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
" \ }
" }}}

" ALE: {{{
let g:ale_sign_error = '!'
let g:ale_sign_warning = '•'
let g:ale_sign_info = '·'
" let g:ale_sign_style_error = '·'
" let g:ale_sign_style_warning = '·'

let g:ale_linters = { 'cs': ['OmniSharp'] }

nmap <silent> <leader>aj :ALENextWrap<cr>
nmap <silent> <leader>ak :ALEPreviousWrap<cr>

" Use unicode chars for ale indicators in the statusline
let g:lightline#ale#indicator_checking = "\uf110"
let g:lightline#ale#indicator_infos = "\uf129"
let g:lightline#ale#indicator_warnings = "\uf071"
let g:lightline#ale#indicator_errors = "\uf05e"
let g:lightline#ale#indicator_ok = "\uf00c"
" }}}

" NERDTree: {{{
nnoremap <silent> <leader>ntt :NERDTreeToggle<CR>
nnoremap <silent> <leader>ntn :NERDTreeFocus<CR>
nnoremap <silent> <leader>ntf :NERDTreeFind<CR>
let NERDTreeShowBookmarks=1
let g:NERDTreeWinSize=60
" Start NERDTree and put the cursor back in the other window.
" autocmd VimEnter * NERDTree | wincmd p
" Open the existing NERDTree on each new tab.
" autocmd BufWinEnter * if getcmdwintype() == '' | silent NERDTreeMirror | endif
" }}}

" GitGutter: {{{
let g:gitgutter_log=0
" }}}

